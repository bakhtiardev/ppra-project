# # -*- coding: utf-8 -*-
# """nlp-project.ipynb

# Automatically generated by Colaboratory.

# Original file is located at
#     https://colab.research.google.com/drive/10B80TQdfySCSHnHt7GI9maTH09A6KULh
# """

# !pip install spacy

# !python -m spacy download en_core_web_sm

# !python -m spacy download en_core_web_md

# !pip install docx2txt

# import docx2txt
# import spacy
# # extract text
# doc_text = docx2txt.process("sample.docx")

# nlp = spacy.load("en_core_web_sm")
# print(nlp(doc_text))

# import spacy
# from spacy.matcher import Matcher
# nlp = spacy.load("en_core_web_sm")

# matcher = Matcher(nlp.vocab)


# pattern = [

#            {"TEXT":""}
#            {"TEXT":"@"},
#            {"IS_ALPHA":True,"OP":"+"},
#            {"LIKE_NUM":True}

#            ]
# matcher.add("PROPER_NOUN",[pattern],greedy='LONGEST')


# doc=nlp(doc_text)
# matches=matcher(doc)
# print(len(matches))

# for match in matches:
#   print(match,doc[match[1]:match[2]])

# !pip install numerizer

# import spacy
# import docx2txt
# import numerizer
# from spacy.matcher import Matcher
# nlp = spacy.load("en_core_web_md")


# sample_text=docx2txt.process("sample.docx")
# # sample_text = ('There is a developer conference'
# #     'happening on 21 July 2019 in London. It is titled'
# #     '  "Applications of Natural Language Processing".'
# #     ' There is a helpline number available'
# #     ' at (123) 456-789 Bid Security @ Rs 200,000.00 (Rupees two lac only) ')


# def extract_bid_security(nlp_doc):
#     matcher = Matcher(nlp.vocab)
#     pattern = [
#                 {'LOWER': 'bid',"OP":"?"}, {'LOWER': 'security'},
#                 {"IS_ALPHA":True,"OP":"*"},
#                 # {"LOWER":"is","OP":"?"},
#                 # {"LOWER":"the","OP":"?"},
#                 {"TEXT": {"REGEX": "^[@=: ]*$"},"OP":"*"},
#                 {"TEXT": {"REGEX": "^(Rs|rs|Rupees|PKR|pkr|Pkr|rupees)*$"},"OP":"?"},
#                 # {"IS_SPACE":True,"OP":"?"},
#                 {"LIKE_NUM":True,"OP":"*"},
#                 {"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"},

#               ]
#     matcher.add('BID_SECURITY', [pattern],greedy="LONGEST")
#     matches = matcher(nlp_doc)
#     print(len(matches))
#     extracted_str=""
#     extracted_str=nlp_doc[matches[0][1]:matches[0][2]].text

#     # for match_id, start, end in matches:
#     #     span = nlp_doc[start:end]
#     #     extracted_str=span.text

#     print("Big Security STR:------------ "+extracted_str)
#     patternOfNum=[{"LIKE_NUM":True,"OP":"+"},{"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"}]
#     matcher.add("BID_SECURITY_NUM",[patternOfNum],greedy="LONGEST")

#     extracted_str=nlp(extracted_str)
#     matchesNum=matcher(extracted_str)
#     print(len(matchesNum))
#     extractedNum=extracted_str[matchesNum[-1][1]:matchesNum[-1][2]]
#     extractedNum=extractedNum._.numerize()

#     #Removing comma and converting into Integer
#     result = int(float(extractedNum.replace(',', '')))
#     print(f"Extracted Number:--------------- {result}")

#     return (extracted_str,result)

# sample_doc = nlp(sample_text)
# extract_bid_security(sample_doc)

# def extract_res_days(nlp_doc):
#     matcher=Matcher(nlp.vocab)
#     pattern = [
#                 {"LOWER":"response","OP":"+"},

#                 {"LOWER":"time"},

#                 # {"LOWER":"is","OP":"?"},
#                 # {"LOWER":"the","OP":"?"},
#                 # {"TEXT": {"REGEX": "^(Response|response|RESPONSE)*$"},"OP":"+"},
#                  {"IS_ALPHA":True,"OP":"*"},
#                 {"TEXT": {"REGEX": "^[@=: ]*$"},"OP":"*"},
#                 {"LIKE_NUM":True,"OP":"+"},
#                 {"POS":"NOUN"}
#                 # {"TEXT": {"REGEX": "^(Days|days|DAYS)*$"},"OP":"+"}
#                 # {"IS_SPACE":True,"OP":"?"},
#                 # {"LIKE_NUM":True,"OP":"?"},
#                 # {"POS":"NOUN","OP":"+"}
#                 #{"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"},
#                   #{"TEXT": {"REGEX": "^[@=: ]*$"},"OP":"*"},

#               ]
#     matcher.add('RESPONCE_DAYS',[pattern],greedy="LONGEST")
#     matches = matcher(nlp_doc)
#     print(len(matches))
#     extracted_str=""
#     extracted_str=nlp_doc[matches[0][1]:matches[0][2]].text

#     # for match_id, start, end in matches:
#     #     span = nlp_doc[start:end]
#     #     extracted_str=span.text

#     print("Responce days STR:------------ "+extracted_str)


#     patternOfNum=[{"LIKE_NUM":True,"OP":"+"},{"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"}]
#     matcher.add("RES_DAYS_NUM",[patternOfNum],greedy="LONGEST")

#     extracted_str=nlp(extracted_str)
#     matchesNum=matcher(extracted_str)
#     print(len(matchesNum))
#     extractedNum=extracted_str[matchesNum[-1][1]:matchesNum[-1][2]]
#     extractedNum=extractedNum._.numerize()

#     #Removing comma and converting into Integer
#     result = int(float(extractedNum.replace(',', '')))
#     print(f"Extracted Number:--------------- {result}")

# extract_res_days(sample_doc)

# def extract_contract_amount(nlp_doc):
#     matcher=Matcher(nlp.vocab)
#     pattern = [
#                {"LOWER":"contract","OP":"+"},

#                 {"LOWER":"amount","OP":"?"},


#                 # {"LOWER":"is","OP":"?"},
#                 # {"LOWER":"the","OP":"?"},
#                 # {"TEXT": {"REGEX": "^(Response|response|RESPONSE)*$"},"OP":"+"},
#                  {"IS_ALPHA":True,"OP":"*"},
#                 {"TEXT": {"REGEX": "^[@=: ]*$"},"OP":"*"},
#                 {"LIKE_NUM":True,"OP":"*"},
#                 {"POS":"NOUN","OP":"?"}
#                 # {"TEXT": {"REGEX": "^(Days|days|DAYS)*$"},"OP":"+"}
#                 # {"IS_SPACE":True,"OP":"?"},
#                 # {"LIKE_NUM":True,"OP":"?"},
#                 # {"POS":"NOUN","OP":"+"}
#                 #{"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"},
#                   #{"TEXT": {"REGEX": "^[@=: ]*$"},"OP":"*"},

#               ]
#     matcher.add('CONTRACT_AMOUNT',[pattern],greedy="LONGEST")
#     matches = matcher(nlp_doc)
#     print(len(matches))
#     extracted_str=""
#     extracted_str=nlp_doc[matches[0][1]:matches[0][2]].text

#     # for match_id, start, end in matches:
#     #     span = nlp_doc[start:end]
#     #     extracted_str=span.text

#     print("Contract amount STR:------------ "+extracted_str)


#     patternOfNum=[{"LIKE_NUM":True,"OP":"+"},{"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"}]
#     matcher.add("CONT_AM_NUM",[patternOfNum],greedy="LONGEST")

#     extracted_str=nlp(extracted_str)
#     matchesNum=matcher(extracted_str)
#     print(len(matchesNum))
#     extractedNum=extracted_str[matchesNum[-1][1]:matchesNum[-1][2]]
#     extractedNum=extractedNum._.numerize()

#     #Removing comma and converting into Integer
#     result = int(float(extractedNum.replace(',', '')))
#     print(f"Extracted Number:--------------- {result}")

# extract_contract_amount(sample_doc)

# def extract_performance_security(nlp_doc):
#     matcher=Matcher(nlp.vocab)
#     pattern = [
#                {"LOWER":"performance","OP":"+"},

#                 {"LOWER":"security","OP":"+"},


#                 # {"LOWER":"is","OP":"?"},
#                 # {"LOWER":"the","OP":"?"},
#                 # {"TEXT": {"REGEX": "^(Response|response|RESPONSE)*$"},"OP":"+"},
#                  {"IS_ALPHA":True,"OP":"*"},
#                 {"TEXT": {"REGEX": "^[@=: ]*$"},"OP":"*"},
#                 {"LIKE_NUM":True,"OP":"*"},
#                 {"POS":"NOUN","OP":"?"}
#                 # {"TEXT": {"REGEX": "^(Days|days|DAYS)*$"},"OP":"+"}
#                 # {"IS_SPACE":True,"OP":"?"},
#                 # {"LIKE_NUM":True,"OP":"?"},
#                 # {"POS":"NOUN","OP":"+"}
#                 #{"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"},
#                   #{"TEXT": {"REGEX": "^[@=: ]*$"},"OP":"*"},

#               ]
#     matcher.add('PERFORMANCE_SECURITY',[pattern],greedy="LONGEST")
#     matches = matcher(nlp_doc)
#     print(len(matches))
#     extracted_str=""
#     extracted_str=nlp_doc[matches[0][1]:matches[0][2]].text

#     # for match_id, start, end in matches:
#     #     span = nlp_doc[start:end]
#     #     extracted_str=span.text

#     print("Performance security STR:------------ "+extracted_str)


#     patternOfNum=[{"LIKE_NUM":True,"OP":"+"},{"TEXT": {"REGEX": "^(lack|lac)*$"},"OP":"?"}]
#     matcher.add("PERFORMANCE_SEC_NUM",[patternOfNum],greedy="LONGEST")

#     extracted_str=nlp(extracted_str)
#     matchesNum=matcher(extracted_str)
#     print(len(matchesNum))
#     extractedNum=extracted_str[matchesNum[-1][1]:matchesNum[-1][2]]
#     extractedNum=extractedNum._.numerize()

#     #Removing comma and converting into Integer
#     result = int(float(extractedNum.replace(',', '')))
#     print(f"Extracted Number:--------------- {result}")

# extract_performance_security(sample_doc)
